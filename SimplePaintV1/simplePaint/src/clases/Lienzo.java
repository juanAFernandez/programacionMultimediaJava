/*
 * Lienzo.java
 *
 * Created on 18-mar-2014, 18:23:01
 */
package clases;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;

/**
 *
 * @author Juan Antonio Fernández Sánchez
 */
public class Lienzo extends javax.swing.JPanel {

    
    /*Atributos:
     * Todo lo necesario para representar cualquier tipo de objeto dentro 
     * de este pequeño paint. 
     * Un par de puntos, uno para el punto solo y los dos para la linea, al
     * menos un color y algún parámetro para el control del tipo de figura.
     */
    Point p;
    Color color;
    Point aLinea, bLinea;
    
    //Variable para controlar el tipo de figura que vamos a pintar.
    private String figura="punto";
    
    //Variable que controla si vamos a rellenar o no la figura.
    private boolean relleno;    
    
    //Métodos de la variable que controla el color.
    public void setColor(Color nuevoColor){
        this.color=nuevoColor;
    }
    public Color getColor(){
        return this.color; 
    }
    
    //Métodos de la variable que controla el tipo de figura.
    public void setFigura(String nuevaFigura){
        this.figura=nuevaFigura;
    }
    public String getFigura(){
        return this.figura;
    }
    
    //Para el control del relleno.
    public void setRelleno(boolean nuevoEstado){
        this.relleno=nuevoEstado;
    }
    public boolean getRelleno(){
        return this.relleno;
    }
    
    //Método que pone todas las variables a null.
    public void clear(){
        this.p=null;
        this.aLinea=null;
        this.bLinea=null;
    }
    
    
    /** Creates new form Lienzo */
    public Lienzo() {
        initComponents();
        this.setBackground(Color.white);
    }
    
     @Override
     //Método que hará que se pinte en el lienzo.
     public void paint (Graphics g){
        /*Dentro de paint siempre hay que comprobar que las variables
          *no son nulas. Hay que comprobarlas TODAS.
          *Por eso si no hacemos el (p!=null) empezaría a pintarlo todo
          *Incluido el punto sin tener este nada dentro por lo que genera
          *un segmentation faul o en este caso NullPointer
        */
         
        //Cada vez que pulsamos algo en VentanaPrincipal modificamos 
        //alguna propiedad en Lienzo.
         
        super.paint(g);
        
        //La codificación de los colores no tiene sentido si existe la 
        //clase color. y Para las figuras podemos usar tb otra clase
        //pero que nos creemos nosotros.
        
        g.setColor(color);

        
        //Si se ha elegido pintar un punto.
        if(figura.equals("punto")){
            if(p!=null)
                g.fillOval(p.x-10,p.y-10, 20, 20);
        }
        //Si se ha elegido pintar una linea.
        if(figura.equals("linea")){
            if(aLinea!=null && bLinea!=null)
                g.drawLine(aLinea.x, aLinea.y, bLinea.x, bLinea.y);
        }
        //Si se ha elegido pintar un rectángulo
        if(figura.equals("rectangulo")){
            if(relleno)//Si el botón de relleno estaba pulsado
               if (aLinea.x <= bLinea.x)
                g.fillRect(aLinea.x, aLinea.y, bLinea.x-aLinea.x, bLinea.y-aLinea.y);
               if (aLinea.x > bLinea.x) 
                 g.fillRect (bLinea.x, bLinea.y, aLinea.x-bLinea.x, aLinea.y-bLinea.y);
            else //Si el botón de relleno no estaba pulsado
               if (aLinea.x <= bLinea.x)
                g.drawRect(aLinea.x, aLinea.y, bLinea.x-aLinea.x, bLinea.y-aLinea.y);
               if (aLinea.x > bLinea.x) 
                 g.drawRect (bLinea.x, bLinea.y, aLinea.x-bLinea.x, aLinea.y-bLinea.y);
        }
        //Si se ha elegido pintar un óvalo
        if(figura.equals("ovalo")){
            if(relleno) //Relleno
                if (aLinea.x <= bLinea.x)
                g.fillOval(aLinea.x, aLinea.y, bLinea.x-aLinea.x, bLinea.y-aLinea.y);
               if (aLinea.x > bLinea.x) 
                 g.fillOval (bLinea.x, bLinea.y, aLinea.x-bLinea.x, aLinea.y-bLinea.y);
            else //No relleno
                if (aLinea.x <= bLinea.x)
                g.drawOval(aLinea.x, aLinea.y, bLinea.x-aLinea.x, bLinea.y-aLinea.y);
               if (aLinea.x > bLinea.x) 
                 g.drawOval (bLinea.x, bLinea.y, aLinea.x-bLinea.x, aLinea.y-bLinea.y);
        }
     }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        p=evt.getPoint();
        repaint();
    }//GEN-LAST:event_formMouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        aLinea=evt.getPoint();
        
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        bLinea=evt.getPoint();
        repaint();
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        repaint();
        
    }//GEN-LAST:event_formMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
